// Code generated by go-enum
// DO NOT EDIT!

package paseto

import (
	"fmt"
)

const (
	// PurposeLocal is a Purpose of type Local
	PurposeLocal Purpose = iota
	// PurposePublic is a Purpose of type Public
	PurposePublic
)

const _PurposeName = "localpublic"

var _PurposeMap = map[Purpose]string{
	0: _PurposeName[0:5],
	1: _PurposeName[5:11],
}

// String implements the Stringer interface.
func (x Purpose) String() string {
	if str, ok := _PurposeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("Purpose(%d)", x)
}

var _PurposeValue = map[string]Purpose{
	_PurposeName[0:5]:  0,
	_PurposeName[5:11]: 1,
}

// ParsePurpose attempts to convert a string to a Purpose
func ParsePurpose(name string) (Purpose, error) {
	if x, ok := _PurposeValue[name]; ok {
		return x, nil
	}
	return Purpose(0), fmt.Errorf("%s is not a valid Purpose", name)
}

const (
	// VersionV1 is a Version of type V1
	VersionV1 Version = iota
	// VersionV2 is a Version of type V2
	VersionV2
)

const _VersionName = "v1v2"

var _VersionMap = map[Version]string{
	0: _VersionName[0:2],
	1: _VersionName[2:4],
}

// String implements the Stringer interface.
func (x Version) String() string {
	if str, ok := _VersionMap[x]; ok {
		return str
	}
	return fmt.Sprintf("Version(%d)", x)
}

var _VersionValue = map[string]Version{
	_VersionName[0:2]: 0,
	_VersionName[2:4]: 1,
}

// ParseVersion attempts to convert a string to a Version
func ParseVersion(name string) (Version, error) {
	if x, ok := _VersionValue[name]; ok {
		return x, nil
	}
	return Version(0), fmt.Errorf("%s is not a valid Version", name)
}
